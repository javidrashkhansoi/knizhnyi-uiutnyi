/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/reader.js":
/*!**************************!*\
  !*** ./src/js/reader.js ***!
  \**************************/
/***/ (function() {

eval("\r\n\r\nconst MAX_WIDTH_768PX = matchMedia(\"(max-width: 768px)\");\r\n\r\nMAX_WIDTH_768PX.addEventListener(\"change\", max768Listener);\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", domContentLoaded);\r\ndocument.addEventListener(\"click\", click);\r\n\r\nconst readerForms = document.forms;\r\nlet noteForm;\r\nif (readerForms.length) {\r\n  const readerSettings = readerForms[\"reader-settings\"];\r\n  noteForm = readerForms[\"createBm\"];\r\n\r\n  readerSettings?.addEventListener(\"input\", input);\r\n  noteForm?.addEventListener(\"submit\", submit);\r\n}\r\n\r\n/** @param {MediaQueryListEvent} event */\r\nfunction max768Listener(event) {\r\n  changeReaderRangeValue(event.matches);\r\n}\r\n\r\nfunction domContentLoaded() {\r\n  loadLocalStorageData();\r\n}\r\n\r\n/** @param {MouseEvent} event */\r\nfunction click(event) {\r\n  /** @type {HTMLElement} */\r\n  const target = event.target;\r\n\r\n  if (target.closest(\"#hideMenu.active\")) {\r\n    sidebarAction(false);\r\n  } else if (target.closest(\"#hideMenu\")) {\r\n    sidebarAction(true);\r\n  }\r\n  if (target.closest(\"[data-note-text]\")) {\r\n    showNoteInfoInPopup(target);\r\n  }\r\n  if (target.closest(\"[data-goto-note]\")) {\r\n    gotoNote(target);\r\n  }\r\n  if (target.closest(\".list-spoller-asaid-book-page__remove\")) {\r\n    noteRemoveAction(target);\r\n  }\r\n  if (target.closest(\".note-remove-action__cancel\")) {\r\n    noteRemoveAction(target, false);\r\n  }\r\n  if (target.closest(\".note-remove-action__remove\")) {\r\n    removeNote(target);\r\n  }\r\n}\r\n\r\nfunction input(event) {\r\n  const input = event.target;\r\n  const inputName = input.name;\r\n\r\n  if (inputName === \"change-reader-width\") {\r\n    setReaderWidth(input);\r\n  }\r\n  if (inputName === \"change-font-size\") {\r\n    setReaderFontSize(input);\r\n  }\r\n  if (inputName === \"read_bg\") {\r\n    changeReaderTheme(input);\r\n  }\r\n  if (inputName === \"reader-settings-font\") {\r\n    changeReaderFontFamily(input);\r\n  }\r\n}\r\n\r\n/** @param {HTMLElement} target */\r\nfunction showNoteInfoInPopup(target) {\r\n  /** @type {HTMLButtonElement} */\r\n  const button = target.closest(\"[data-note-text]\");\r\n  /** @type {HTMLFormElement} */\r\n  const noteInfoForm = readerForms?.[\"note-info\"];\r\n  /** @type {HTMLInputElement} */\r\n  const noteLabelInput = noteInfoForm?.[\"note-info-label\"];\r\n  /** @type {HTMLTextAreaElement} */\r\n  const noteTextarea = noteInfoForm?.[\"note-info-text\"];\r\n\r\n  if (noteLabelInput && noteTextarea) {\r\n    /** @type {string} */\r\n    const buttonData = button.dataset.noteText;\r\n    /** @type {string} */\r\n    const buttonInnerText = button.innerText;\r\n\r\n    noteLabelInput.value = buttonInnerText;\r\n    noteTextarea.value = buttonData;\r\n\r\n    noteTextarea.style.removeProperty(\"--nfft-height\");\r\n    noteTextarea.style.setProperty(\"--nfft-height\", `${noteTextarea.scrollHeight + 10}px`);\r\n  }\r\n}\r\n\r\n/** @param {HTMLElement} target */\r\nfunction gotoNote(target) {\r\n  /** @type {HTMLFormElement} */\r\n  const form = target.closest(\"form\");\r\n  /** @type {HTMLTextAreaElement} */\r\n  const fragment = form?.[\"note-info-text\"];\r\n  const reader = document.getElementById(\"reader\");\r\n\r\n  if (reader.innerHTML.includes(\"\\s\")) reader.innerHTML = reader.innerHTML.replace(/\\s/g, \" \");\r\n\r\n  while (reader.innerHTML.includes(\"\\ \\ \")) {\r\n    reader.innerHTML = reader.innerHTML.replace(/\\ \\ /g, \" \");\r\n  }\r\n\r\n  removeNoteHighlight();\r\n  hideHeaderActions();\r\n\r\n  if (fragment && reader) {\r\n    const fragments = fragment.value.split(/\\n\\n/g);\r\n    let idCounter = document.querySelectorAll(\".finded-note\").length + 1;\r\n    let firstFindedFragmentId = idCounter;\r\n\r\n    fragments.forEach(fragment => {\r\n      const html = `<span id=\"finded-note-${idCounter++}\" class=\"finded-note\">${fragment}</span>`;\r\n\r\n      reader.innerHTML = reader.innerHTML.replace(fragment, html);\r\n    });\r\n\r\n    popupHide();\r\n\r\n    const firstFindedFragment = document.getElementById(`finded-note-${firstFindedFragmentId}`) || document.getElementById(`finded-note-${++firstFindedFragmentId}`);\r\n\r\n    if (firstFindedFragment) {\r\n\r\n      messageAction({ item: \"green\", message: \"Заметка найдена\" });\r\n\r\n      firstFindedFragment?.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"center\",\r\n      });\r\n    } else {\r\n      messageAction({ message: \"Заметка не найдена\" });\r\n    }\r\n  }\r\n}\r\n\r\nfunction removeNoteHighlight() {\r\n  const reader = document.getElementById(\"reader\");\r\n  const findedNotes = reader?.querySelectorAll(\".finded-note\");\r\n\r\n  findedNotes?.forEach(findedNote => {\r\n    findedNote.outerHTML = findedNote.innerHTML;\r\n  });\r\n}\r\n\r\nfunction hideHeaderActions() {\r\n  const headerActions = document.querySelector(\".actions-header\");\r\n  headerActions?.classList.remove(\"show\");\r\n  paddingRightAction(false);\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} target\r\n * @param {boolean} isShow\r\n * */\r\nfunction noteRemoveAction(target, isShow = true) {\r\n  const noteBlock = target.closest(\"[data-note]\");\r\n  const removeBlock = noteBlock?.querySelector(\".note-remove-action\");\r\n  removeBlock?.classList.toggle(\"show\", isShow);\r\n\r\n}\r\n\r\n/** @param {HTMLElement} target */\r\nfunction removeNote(target) {\r\n  const noteBlock = target.closest(\"[data-note]\");\r\n  const notesList = target.closest(\".list-spoller-asaid-book-page\");\r\n\r\n  noteBlock?.remove();\r\n\r\n  if (!document.querySelectorAll(\"[data-note]\").length) {\r\n    notesList?.remove();\r\n  }\r\n\r\n  setNoteCount();\r\n\r\n  messageAction({ item: \"green\", message: \"Заметка удалена\" });\r\n}\r\n\r\nfunction submit(event) {\r\n  const target = event.target;\r\n  const targetId = target.id;\r\n  if (targetId === \"createBm\") {\r\n    creatNote(event);\r\n  }\r\n}\r\n\r\nfunction loadLocalStorageData() {\r\n  if (document.getElementById(\"hideMenu\")) {\r\n    if (localStorage.readerWidth) {\r\n      const readerWidthRange = readerForms?.[\"reader-settings\"]?.[\"change-reader-width\"];\r\n      if (readerWidthRange) {\r\n        readerWidthRange.value = localStorage.readerWidth;\r\n        setReaderWidth(readerWidthRange, false);\r\n      }\r\n    } else {\r\n      changeReaderRangeValue(MAX_WIDTH_768PX.matches);\r\n    }\r\n    if (localStorage.isHideSidebar) {\r\n      sidebarAction(true);\r\n    } else {\r\n      sidebarAction(false);\r\n    }\r\n  }\r\n  if (document.getElementById(\"reader\")) {\r\n    if (localStorage.readerFontSize) {\r\n      const readerFontSizeRange = readerForms?.[\"reader-settings\"]?.[\"change-font-size\"];\r\n\r\n      if (readerFontSizeRange) {\r\n        readerFontSizeRange.value = localStorage.readerFontSize;\r\n        setReaderFontSize(readerFontSizeRange);\r\n      }\r\n    }\r\n    if (localStorage.color) {\r\n      const html = document.documentElement;\r\n      const color = JSON.parse(localStorage.color);\r\n      const id = color.id;\r\n      const backgroundColor = color.backgroundColor;\r\n      const fontColor = color.fontColor;\r\n      const input = document.getElementById(id);\r\n\r\n      if (input) input.checked = true;\r\n\r\n      html.style.setProperty(\"--reader-background-color\", backgroundColor);\r\n      html.style.setProperty(\"--reader-font-color\", fontColor);\r\n    }\r\n    if (localStorage.fontFamily) {\r\n      const html = document.documentElement;\r\n      const ff = JSON.parse(localStorage.fontFamily);\r\n      const id = ff.id;\r\n      const fontFamily = ff.fontFamily;\r\n      const input = document.getElementById(id);\r\n\r\n      if (input) input.checked = true;\r\n\r\n      html.style.setProperty(\"--reader-font-family\", fontFamily);\r\n    }\r\n  }\r\n}\r\n\r\n/** @param {boolean} isMobile */\r\nfunction changeReaderRangeValue(isMobile = true) {\r\n  /** @type {HTMLInputElement} */\r\n  const widthRange = readerForms?.[\"reader-settings\"]?.[\"change-reader-width\"];\r\n\r\n  if (widthRange && !localStorage.readerWidth) widthRange.value = isMobile ? 100 : 70;\r\n}\r\n\r\nfunction setReaderWidth(input, isHidden = true) {\r\n  const inputValue = +input.value;\r\n  const container = document.querySelector(\".main-book-page__container\");\r\n  const button = document.getElementById(\"hideMenu\");\r\n  if (isHidden && !button?.classList.contains(\"self\")) sidebarAction(inputValue > 75);\r\n  container?.style.setProperty(\"--max-width\", `${inputValue}%`);\r\n\r\n  localStorage.setItem(\"readerWidth\", inputValue);\r\n}\r\n\r\nfunction setReaderFontSize(input) {\r\n  const value = input?.value;\r\n  const reader = document.getElementById(\"reader\");\r\n\r\n  reader?.style.setProperty(\"--reader-font-size\", value);\r\n  localStorage.setItem(\"readerFontSize\", value);\r\n}\r\n\r\nfunction changeReaderTheme(input) {\r\n  const inputBlock = input.parentElement;\r\n\r\n  if (inputBlock?.classList.contains(\"theme-reader__item\")) {\r\n    const html = document.documentElement;\r\n    const id = input.id;\r\n    const backgroundColor = inputBlock.style.getPropertyValue(\"--reader-background-color\").trim();\r\n    const fontColor = inputBlock.style.getPropertyValue(\"--reader-font-color\").trim();\r\n\r\n    if (backgroundColor && fontColor) {\r\n      html.style.setProperty(\"--reader-background-color\", backgroundColor);\r\n      html.style.setProperty(\"--reader-font-color\", fontColor);\r\n\r\n      const color = {\r\n        id: id,\r\n        backgroundColor: backgroundColor,\r\n        fontColor: fontColor,\r\n      }\r\n\r\n      localStorage.setItem(\"color\", JSON.stringify(color));\r\n    }\r\n  }\r\n}\r\n\r\nfunction changeReaderFontFamily(input) {\r\n  const inputBlock = input.parentElement;\r\n\r\n  if (inputBlock?.classList.contains(\"font-reader__item\")) {\r\n    const html = document.documentElement;\r\n    const id = input.id;\r\n    const fontFamily = inputBlock.style.getPropertyValue(\"--reader-font-family\").trim();\r\n\r\n    if (fontFamily) {\r\n      html.style.setProperty(\"--reader-font-family\", fontFamily);\r\n\r\n      const ff = {\r\n        id: id,\r\n        fontFamily: fontFamily,\r\n      }\r\n\r\n      localStorage.setItem(\"fontFamily\", JSON.stringify(ff));\r\n    }\r\n  }\r\n}\r\n\r\nfunction sidebarAction(isHidden) {\r\n  const button = document.getElementById(\"hideMenu\");\r\n  const container = document.querySelector(\".main-book-page__container\");\r\n\r\n  button.classList.toggle(\"active\", isHidden);\r\n\r\n  const readerWidthRange = readerForms?.[\"reader-settings\"]?.[\"change-reader-width\"];\r\n  const readerWidthRangeValue = +readerWidthRange?.value;\r\n  button.classList.toggle(\"self\",\r\n    (readerWidthRangeValue < 75 && button.classList.contains(\"active\")) ||\r\n    (readerWidthRangeValue > 75 && !button.classList.contains(\"active\")));\r\n\r\n  container?.classList.toggle(\"full\", isHidden);\r\n  container?.classList.contains(\"full\") ?\r\n    button.innerText = button.dataset.hideText :\r\n    button.innerText = button.dataset.showText;\r\n\r\n  container?.classList.contains(\"full\") ?\r\n    localStorage.setItem(\"isHideSidebar\", \"hidden\") :\r\n    localStorage.removeItem(\"isHideSidebar\");\r\n}\r\n\r\nconst reader = document.getElementById(\"reader\");\r\nif (reader) {\r\n  document.addEventListener(\"selectionchange\", () => {\r\n    const selection = getSelection() || document.getSelection();\r\n    const text = selection.toString().trim();\r\n    const parentElement = selection.anchorNode?.parentElement;\r\n    const noteButtons = document.querySelector(\".note-buttons\");\r\n    if (parentElement?.closest(\"#reader\") && text) {\r\n      if (noteButtons) {\r\n        const p = reader.querySelector(\"p\");\r\n\r\n        let top, left, lineHeight;\r\n\r\n        if (p) {\r\n          lineHeight = getComputedStyle(p).lineHeight;\r\n        }\r\n\r\n        document.addEventListener(\"mouseup\", event => {\r\n          top = event.y;\r\n          left = event.x;\r\n\r\n          setNoteButtonsPosition(top, left, lineHeight);\r\n        }, { once: true });\r\n\r\n        if (matchMedia(\"(any-hover: none)\").matches) {\r\n          noteButtons.classList.add(\"show\");\r\n        }\r\n\r\n        function setNoteButtonsPosition(top, left, lineHeight) {\r\n          noteButtons.style.setProperty(\"--nb-top\", `${top + scrollY}px`);\r\n          noteButtons.style.setProperty(\"--nb-left\", `${left}px`);\r\n\r\n          if (lineHeight) {\r\n            noteButtons.style.setProperty(\"--nb-gap\", lineHeight);\r\n          }\r\n\r\n          noteButtons.classList.add(\"show\");\r\n        }\r\n      }\r\n\r\n      if (noteForm) {\r\n        const noteName = noteForm[\"bm_note\"];\r\n        const noteFragment = noteForm[\"bm_text\"];\r\n        const noteTitle = document.querySelector(\".spoller-asaid-book-page__title_note\");\r\n        const notesBlock = noteTitle?.nextElementSibling;\r\n        const notes = notesBlock?.querySelectorAll(\".list-spoller-asaid-book-page__item\");\r\n\r\n        if (noteName && notes) {\r\n          noteName.value = `Заметка #${notes.length + 1}`;\r\n        }\r\n\r\n        if (noteFragment) setReaderTextareasText(noteFragment, text);\r\n      }\r\n\r\n      /** @type {HTMLFormElement} */\r\n      const readerErrorForm = readerForms?.[\"reader-error-form\"];\r\n\r\n      if (readerErrorForm) {\r\n        /** @type {HTMLTextAreaElement} */\r\n        const readerErrorFormTextarea = readerErrorForm?.[\"reader-error-form-text\"];\r\n\r\n        if (readerErrorFormTextarea) setReaderTextareasText(readerErrorFormTextarea, text);\r\n      }\r\n    } else {\r\n      noteButtons?.classList.remove(\"show\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction creatNote(event) {\r\n  event.preventDefault();\r\n\r\n  const noteTitle = document.querySelector(\".spoller-asaid-book-page__title_note\");\r\n  if (noteTitle) {\r\n    const noteCounter = noteTitle.querySelector(\"span\");\r\n    const notesBlock = noteTitle.nextElementSibling;\r\n    const notesList = notesBlock?.querySelector(\".list-spoller-asaid-book-page\");\r\n\r\n    const noteItemHtml = `\r\n    <li data-note class=\"list-spoller-asaid-book-page__item list-spoller-asaid-book-page__item_remove\">\r\n      <div class=\"list-spoller-asaid-book-page__remove-action note-remove-action\">\r\n        <button class=\"note-remove-action__remove\">\r\n          <svg width=\"24\" height=\"24\">\r\n            <use xlink:href=\"#done\"></use>\r\n          </svg>\r\n        </button>\r\n        <button class=\"note-remove-action__cancel\">\r\n          <svg width=\"24\" height=\"24\">\r\n            <use xlink:href=\"#backspace\"></use>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <button data-popup-target=\"noteInfo\" data-note-text=\"${setNoteFragmentText()}\" class=\"list-spoller-asaid-book-page__link\">${setNoteLabelText() || setNoteFragmentText()}</button>\r\n      <button class=\"list-spoller-asaid-book-page__remove\"></button>\r\n    </li>\r\n    `;\r\n\r\n    if (notesList) {\r\n      notesList.insertAdjacentHTML(\"beforeend\", noteItemHtml);\r\n    } else {\r\n      const html = `<ul class=\"spoller-asaid-book-page__list list-spoller-asaid-book-page\">${noteItemHtml}</ul>`;\r\n\r\n      notesBlock?.insertAdjacentHTML(\"beforeend\", html);\r\n    }\r\n\r\n    setNoteCount();\r\n  }\r\n\r\n  popupHide();\r\n  messageAction({ item: \"green\", message: \"Закладка создана\" });\r\n  getSelection()?.empty();\r\n  document.getSelection()?.empty();\r\n}\r\n\r\nfunction setNoteLabelText() {\r\n  const noteName = noteForm?.[\"bm_note\"];\r\n  const noteNameValue = noteName?.value?.trim();\r\n\r\n  return noteNameValue || false;\r\n}\r\n\r\nfunction setNoteFragmentText() {\r\n  const noteFragment = noteForm?.[\"bm_text\"];\r\n  const noteFragmentValue = noteFragment?.value;\r\n\r\n  return noteFragmentValue || false;\r\n}\r\n\r\nfunction setNoteCount() {\r\n  const counter = document.querySelector(\".spoller-asaid-book-page__title_note span\");\r\n\r\n  if (counter) counter.innerHTML = document.querySelectorAll(\"[data-note]\").length;\r\n}\r\n\r\n/**\r\n * @param {HTMLTextAreaElement} textarea\r\n * @param {string} text\r\n */\r\nfunction setReaderTextareasText(textarea, text) {\r\n  textarea.style.removeProperty(\"--nfft-height\");\r\n  textarea.value = text;\r\n  textarea.style.setProperty(\"--nfft-height\", `${textarea.scrollHeight + 10}px`);\r\n}\r\n\r\nfunction popupHide() {\r\n  const showedPopup = document.querySelector(\"[data-popup].show\");\r\n  if (showedPopup) {\r\n    showedPopup.classList.remove(\"show\");\r\n    paddingRightAction(false);\r\n    document.body.removeAttribute(\"data-test\");\r\n  }\r\n}\r\n\r\nfunction paddingRightAction(padding = true) {\r\n  const body = document.body;\r\n  const wrapper = document.querySelector(\".wrapper\");\r\n\r\n  const lockPaddingValue = padding ? `${window.innerWidth - wrapper.offsetWidth}px` : \"\";\r\n  body.style.setProperty(\"--padding\", lockPaddingValue);\r\n\r\n  body.classList.toggle(\"lock\", padding);\r\n}\r\n\r\nfunction messageAction({\r\n  block = undefined,\r\n  item = undefined,\r\n  message = undefined,\r\n  duration = 2000,\r\n}) {\r\n  const body = document.body;\r\n  const messageBlock = document.querySelector(\".message-block\");\r\n\r\n  if (!messageBlock) {\r\n    const messageBlock = document.createElement(\"div\");\r\n    messageBlock.classList.add(\"message-block\");\r\n    if (block) messageBlock.classList.add(block);\r\n    body.append(messageBlock);\r\n  }\r\n\r\n  createMessageItem(item, message, duration);\r\n}\r\n\r\nfunction createMessageItem(item, message, duration) {\r\n  const messageBlock = document.querySelector(\".message-block\");\r\n\r\n  const messageItem = document.createElement(\"div\");\r\n  messageItem.classList.add(\"message-block__item\");\r\n  if (item) messageItem.classList.add(item);\r\n  messageItem.innerHTML = message ? message : \"<span>Message!</span>\";\r\n  messageBlock.append(messageItem);\r\n\r\n  setTimeout(() => {\r\n    messageItem.classList.add(\"show\");\r\n\r\n    removeMessageItem(messageItem, duration);\r\n  });\r\n}\r\n\r\nfunction removeMessageItem(item, duration) {\r\n  const messageBlock = document.querySelector(\".message-block\");\r\n  setTimeout(() => {\r\n    item.classList.add(\"hide\");\r\n\r\n    item.addEventListener(\"transitionend\", () => {\r\n      item.remove();\r\n\r\n      if (!messageBlock.querySelector(\".message-block__item\")) messageBlock.remove();\r\n    }, { once: true });\r\n  }, duration);\r\n}\r\n\n\n//# sourceURL=webpack://knizhnyi-uiutnyi/./src/js/reader.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/reader.js"]();
/******/ 	
/******/ })()
;